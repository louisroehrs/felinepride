schema {
    query: Query
    mutation: Mutation
}

type Query {
    user (userName: String email:String id:String): User
    getAllUsers: [User]
    login (userName:String password:String) : User
    getAllComponentTypes (visibility:String) : [ComponentType]
    getComponentsByType ( componentType:String): [Component]
    getComponentTypeByName ( name:String) : ComponentType

}


type Mutation {
    registerUser( create: RegisterUserRequestInput! ) :User
    deleteUser( delete: DeleteRequestInput!) :User
    updateUser( update: UpdateUserRequestInput! ) :User
    saveNewComponent(create: NewComponentRequestInput!) : Component
    deleteComponent(delete: DeleteComponentRequestInput!): Component
    updateComponent(update: UpdateComponentRequestInput!): Component
    updateComponentType(update: UpdateComponentTypeRequestInput!) : ComponentType
}

input RegisterUserRequestInput {
    userName: String
    email: String
    password: String
}

input DeleteRequestInput {
    id: String
}

input UpdateUserRequestInput {
    id: String
    userName: String
    email: String
    password: String
}

input NewComponentRequestInput {
    id: String
    name:String
    type:String
    owlClass:String
    componentType:String
    attributes: [AttributeInput]
}

input UpdateComponentRequestInput {
    id: String
    name:String
    type:String
    componentType:String
    owlClass:String
    attributes: [AttributeInput]
}

input UpdateComponentTypeRequestInput {
    id: String
    name:String
    type:String
    componentType:String
    visibility: String
    owlClass:String
    sets: [SetInput]
    attributes: [ComponentTypeAttributeInput]
}

input DeleteComponentRequestInput {
    id: String
}

type Position {
    x: Int
    y: Int
}

type User {
    type: String
    currentLand:String
    position: Position
    id: String
    userName: String
    firstName: String
    lastName: String
    email: String
    password: String
    isActive: Boolean
    isAdmin: Boolean
}

type ComponentType {
    id: String
    type: String
    name:String
    componentType:String
    owlClass:String
    attributes: [Attribute]
    visibility:String
    sets: [Set]
}

type Component {
    id: String
    type: String
    componentType:String
    name:String
    owlClass:String
    attributes: [Attribute]
}

type Attribute {
    name:String
    value: String
    datatype: String
    editor:String
    setName: String
    owlClass: String
}

type Set {
    setName: String
    members: [SetMember]
}
input SetInput {
    setName: String
    members: [SetMemberInput]
}

type SetMember {
    name: String
    owlClass:String
}

input SetMemberInput {
    name: String
    owlClass:String
}


input AttributeInput {
    name: String
    value: String
    datatype: String
    editor: String
    owlClass: String
}

input ComponentTypeAttributeInput {
    name: String
    value: String
    datatype: String
    editor: String
    setName: String
    owlClass: String
}